# Publish a Framework Website to IIS OnPremise
# This version will not create the app pool or website
## https://www.devopspertise.com/2020/07/12/azure-devops-iis-deployment-using-environments/#what-are-environments

parameters:
  - name: artifactName
    type: string
  # 'Development-IIS-OnPremise', 'Production-IIS-OnPremise'
  # IisAdoEnvironmentName in the variable group
  # the environment has the agent that is running on the IIS server
  - name: environment
    type: string
  - name: environmentResourceName
    type: string
  - name: iisAppPoolName
    type: string
  - name: iisWebSiteName
    type: string
  # ex: '%SystemDrive%\inetpub\wwwroot\$(websiteName)'
  - name: iisTargetFolder
    type: string
  - name: dotNetType
    type: string
    values:
      - Net
      - Framework

jobs:
  - deployment: Deployment
    workspace:
      clean: all
    environment:
      name: ${{ parameters.environment }}
      resourceName: ${{ parameters.environmentResourceName }}
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: ${{ parameters.artifactName }}

            # see the Readme.me for more details on File configuration Transformations
            # the ASPNETCORE_ENVIRONMENT=Production is set in the web.config for .Net applications
            # Assuming you are using IISPublish for Production
            - task: FileTransform@2
              condition: ${{ eq(parameters.dotNetType, 'Net') }}
              displayName: "File Transform: appsettings.json from Variables"
              inputs:
                folderPath: "$(Pipeline.Workspace)\\${{ parameters.artifactName }}\\*.zip"
                jsonTargetFiles: "**/appsettings.Production.json"

            - task: FileTransform@2
              condition: ${{ eq(parameters.dotNetType, 'Framework') }}
              displayName: "File Transform: web.config from Variables"
              inputs:
                folderPath: "$(Pipeline.Workspace)\\${{ parameters.artifactName }}\\*.zip"
                xmlTargetFiles: "**/web.config"

            - task: IISWebAppDeploymentOnMachineGroup@0
              displayName: "Deploy IIS client code"
              inputs:
                WebsiteName: ${{ parameters.iisWebSiteName }}
                Package: $(Pipeline.Workspace)\${{ parameters.artifactName }}\**\*.zip
                TakeAppOfflineFlag: true
                RemoveAdditionalFilesFlag: true - task: PowerShell@2

            - template: onProdDeploySuccess.yml
              parameters:
                buildId: $(Build.BuildId)
                definitionId: $(System.DefinitionId)
                requestedForId: $(Build.RequestedForId)
                # ${{ parameters.environment }} will be {Prefix}-{Development/Test/Production}-{Type ex: Exe}
                condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), contains(${{ parameters.environment }}, 'Production'))
        
            # these steps may not be needed
            - task: IISWebAppManagementOnMachineGroup@0
              displayName: "Stop IIS Site"
              inputs:
                IISDeploymentType: "IISWebsite"
                ActionIISWebsite: "StopWebsite"
                StartStopWebsiteName: ${{parameters.iisWebSiteName}}

            - task: IISWebAppManagementOnMachineGroup@0
              displayName: "Restart App Pool"
              inputs:
                IISDeploymentType: 'IISApplicationPool'
                ActionIISApplicationPool: 'RecycleAppPool'
                StartStopRecycleAppPoolName: ${{ parameters.iisAppPoolName }}

            - task: IISWebAppManagementOnMachineGroup@0
              displayName: "Start IIS Start"
              inputs:
                IISDeploymentType: "IISWebsite"
                ActionIISWebsite: "StartWebsite"
                StartStopWebsiteName: ${{parameters.iisWebSiteName}}
              
             # warm up the site
             - task: PowerShell@2
              displayName: 'Warm-up Site (Ping and Encrypt)'
              condition: ${{ ne(parameters.siteUrl, '') }}
              inputs:
                targetType: 'inline'
                script: |
                  $url = '${{ parameters.siteUrl }}'
                  Write-Host "Warming up site:  ${{ parameters.siteUrl }}"
                  try {
                    $response = Invoke-WebRequest -Uri  ${{ parameters.siteUrl }} -UseBasicParsing -TimeoutSec 30
                    Write-Host "Warm-up successful. Status: $($response.StatusCode)"
                  } catch {
                    Write-Warning "Warm-up request failed: $($_.Exception.Message)"
                  }

